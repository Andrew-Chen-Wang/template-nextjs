import {
  type DatabaseMetadata,
  type GeneratorDialect,
  type SerializeFileOptions,
  TypeScriptSerializer,
  transform,
} from "kysely-codegen"

// Default configuration: https://github.com/RobinBlomberg/kysely-codegen/releases/tag/0.18.0

class Serializer extends TypeScriptSerializer {
  constructor(options = {}) {
    super(options)
    // https://github.com/RobinBlomberg/kysely-codegen/issues/229#issuecomment-2762149908
    this.serializeFile = this.serializeFile.bind(this)
  }

  serializeFile(
    metadata: DatabaseMetadata,
    dialect: GeneratorDialect,
    options?: SerializeFileOptions,
  ): string {
    let data = ""

    if (!this.skipAutogeneratedFileComment) {
      data += "/**\n"
      data += " * This file was generated by kysely-codegen.\n"
      data += " * Please do not edit it manually.\n"
      data += " */\n\n"
    }

    data += this.serializeStatements(
      transform({
        camelCase: options?.camelCase,
        defaultSchemas: options?.defaultSchemas,
        dialect,
        metadata,
        overrides: options?.overrides,
        runtimeEnums: this.runtimeEnums,
      }),
    )

    return data
  }
}

const config = {
  envFile: `${__dirname}/../../../apps/website/.env`,
  logLevel: "warn",
  outFile: `${__dirname}/../src/types.ts`,
  url: "env(DATABASE_URL)",
  camelCase: true,
  serializer: new Serializer({
    runtimeEnums: true,
    singularize: false,
    skipAutogeneratedFileComment: false,
    typeOnlyImports: true,
  }),
}

export default config
